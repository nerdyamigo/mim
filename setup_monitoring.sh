#!/bin/bash

# AWS Service Profiles Schema Monitoring Setup Script
# This script sets up automated monitoring for AWS API schema changes

set -e

echo "üöÄ Setting up AWS Service Profiles Schema Monitoring..."
echo

# Create necessary directories
echo "üìÅ Creating directories..."
mkdir -p schemas
mkdir -p .github/workflows
mkdir -p docs

# Check if Python script exists
if [ ! -f "scripts/schema_monitor.py" ]; then
    echo "‚ùå Error: scripts/schema_monitor.py not found!"
    echo "Please ensure you're running this script from the project root directory."
    exit 1
fi

# Create initial baseline schema
echo "üìä Creating initial baseline schema..."
echo "This will analyze 15 AWS services to establish a baseline..."
python3 scripts/schema_monitor.py --create-baseline --sample-size 15

# Check if baseline was created successfully
if [ -f "schemas/baseline_schema.json" ]; then
    echo "‚úÖ Baseline schema created successfully!"
    
    # Show baseline summary
    echo
    echo "üìà Baseline Summary:"
    python3 -c "
import json
with open('schemas/baseline_schema.json', 'r') as f:
    data = json.load(f)

print(f'  ‚Ä¢ Services analyzed: {len(data.get(\"analyzed_services\", []))}')
print(f'  ‚Ä¢ Top-level fields: {len(data.get(\"top_level_fields\", []))}')
print(f'  ‚Ä¢ Action fields: {len(data.get(\"action_fields\", []))}')
print(f'  ‚Ä¢ Resource fields: {len(data.get(\"resource_fields\", []))}')
print(f'  ‚Ä¢ Condition key fields: {len(data.get(\"condition_key_fields\", []))}')
print(f'  ‚Ä¢ Data types: {len(data.get(\"data_types\", []))}')
print(f'  ‚Ä¢ Created: {data.get(\"timestamp\", \"Unknown\")}')
"
else
    echo "‚ùå Error: Baseline schema creation failed!"
    exit 1
fi

echo
echo "üîß Setup Instructions:"
echo
echo "1. üì§ Commit and push the baseline schema to GitHub:"
echo "   git add schemas/ docs/ .github/"
echo "   git commit -m 'üîç Add AWS API schema monitoring system'"
echo "   git push"
echo
echo "2. ‚öôÔ∏è Enable GitHub Actions workflows:"
echo "   ‚Ä¢ Go to your GitHub repository"
echo "   ‚Ä¢ Click on the 'Actions' tab"
echo "   ‚Ä¢ Enable workflows if prompted"
echo
echo "3. üîî Optional: Configure notifications:"
echo "   ‚Ä¢ Set SLACK_WEBHOOK_URL in repository variables for Slack alerts"
echo "   ‚Ä¢ Customize notification settings in .github/workflows/schema-monitor.yml"
echo
echo "4. ‚úÖ Test the monitoring:"
echo "   ‚Ä¢ Go to Actions ‚Üí 'AWS Schema Monitor' ‚Üí 'Run workflow'"
echo "   ‚Ä¢ Or wait for the daily automatic run at 9 AM UTC"
echo

echo "üìö Documentation:"
echo "   ‚Ä¢ Read docs/SCHEMA_MONITORING.md for detailed usage"
echo "   ‚Ä¢ Run 'python3 scripts/schema_monitor.py --help' for options"
echo

echo "üéØ What happens next:"
echo "   ‚Ä¢ Daily monitoring will check for AWS API changes"
echo "   ‚Ä¢ New fields/data types will trigger GitHub issues"
echo "   ‚Ä¢ Schema history will be maintained in schemas/ directory"
echo "   ‚Ä¢ You'll be alerted to update your CLI when needed"
echo

echo "‚ú® Schema monitoring setup completed successfully!"

# Test the monitoring once
echo
echo "üß™ Testing monitoring (should show no changes)..."
if python3 scripts/schema_monitor.py; then
    echo "‚úÖ Monitoring test passed!"
else
    echo "‚ÑπÔ∏è  Changes detected in test run (this is normal if different services were sampled)"
fi

echo
echo "üéâ All done! Your AWS Service Profiles CLI now has automated schema monitoring."
echo "Check the documentation at docs/SCHEMA_MONITORING.md for more details."